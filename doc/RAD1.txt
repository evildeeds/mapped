1 - Introduction
1.1 - Purpose of application
We have chosen to create a lecture hall finder.
The idea is to make it easy to find a location based on a name, mainly for new students that never been to Chalmers before (or any other University).
The design will be generalized as a precise location finder with the possibly displaying individual rooms, how to find them
and additional information such as possible entrances, floor number and also a path from the current location. 

1.2 - General characteristics of application
The application is a collaboration of three parts: Map, Setting and Search.
The Map is a mapping over the area you are in and how you go from there.
Settings changes how you view the map and small changes overall.
Search is the location you want to find.

1.3 - Scope of application
The scope of our project is more detailed information about rooms at Chalmers campus Johanneberg,
but since we will use the Google Maps service you will be able to get to our school(s) from anywhere.
We are not in any way associated with Google.

1.4 - Objectives and success criteria of the project
● Use of Google Maps service
● GPS for exact coordinates of the rooms
● Add building annotations
● Add Sample of rooms/buildings (Springa runt)

1.5 - Definitions, acronyms and abbreviations
Building Annotation: Draw on set map, showing entrance(s)

2 - Proposed application

2.1 - Overview
Frapp will show you what which building it is in, and the room you are looking for.

2.2 - Functional requirements
2.2.1 Database-related requirements

2.2.1.1 - Load rooms
Scenario: Loading rooms from database
Trigger: Starting FRAPP
Precondition: Rooms cached.
Basic path
The user starts frapp

2.3 - User related requirements
2.3.1 - Location-related requirements

2.3.1.1 - Title: Startup
Precondition: User starts the Frapp
Post condition: User enter Search view 
Description: The user is shown the Search fields
Dependencies: None
Rationale: Shows which app started

2.3.1.2 - Title: Favorite
Precondition:  User is on the map and selects an annotation
Post condition:  A small description come up with a few options
Description: The user gets information about the room/building with options on what to do with it
Dependencies: That a room is selected and plotted on the map
Rationale: If you have a hard time remember a place in the beginning, just mark it to get easy access from the search view 

2.3.1.3 - Title: Remove favorite
Precondition: Select options in search view
Post condition: All favorites comes up with a checkout box
Description: When you get new favorites and want to remove the old ones to make it optimized
Dependencies: That favorites isn’t empty
Rationale: A compliment to favorite, can’t just add things without a removal

2.3.1.4 - Title: Add schedule 
Precondition: Search view, clicking browsing for online calendar 
Post condition: A box with the path to the calendar website appears
Description: User has the path ready in the clipboard
Dependencies: Has an approved calendar that Frapp approves
Rationale: To be able to put your entire weeks calendar with ease and just look at the map to see where you need to be.

2.3.1.5 - Title:  Beep
Precondition: User has a room/building on the map
Post condition: A box appear with a message
Description: When the user gets into a 20meter radius of the actual position, it gives a mild indication that it is close
Dependencies: must have an active point on the map
Rationale: If you are in a hurry and know in what direction the “goal” is in, you can run until you hear the sound and then start looking around 

2.3.1.6 - Title: Easy find
Precondition: User enters a building while looking for a room
Post condition: A schematics of the floor appears
Description: The user can easy figure out a room by looking at the floor schematic
Dependencies: When you enter any of the entrance points it changes map layer
Rationale: A solution to our problem when users enter building and get a bad reception with the satellites 

2.3.1.7 - Title: Wrong
Precondition: User searched for a valid room/building
Post condition: Failed to find the set room/building
Description: If a user can’t seem to locate the named room/building, he or she can restart to get better values on positions
Dependencies: None
Rationale: When the user know that the position is not correct
 
2.3.1.8 - Title: Empty
Precondition: The search field is incorrectly filled
Post condition: Stay at the search fields
Description: Nothing happens
Dependencies: None
Rationale: The user can’t get to the map without valid room/building name

2.3.1.9 - Title: Search
Precondition: Filled a correct room/building
Post condition: Shows map with target location
Description: The user chooses a room/building and presses go
Dependencies: None
Rationale: Search for a room/building

2.3.1.10 - Title: Swipe map-search
Precondition: map view is active
Post condition: search view is active
Description: Moves from the map to the search fields with a right-to-left swipe
Dependencies: None
Rationale: So the user can easily switch between views

2.3.1.11 - Title: Swipe search-map
Precondition: Search view is active
Post condition: Map view is active
Description: Moves from the search fields to the map
Dependencies: A valid location is needed in the search fields
Rationale: A fast “go” button, or go back to the map if you missclicked

2.3.1.12 - Title: Zoom
Precondition: The map view is active
Post condition: Zooms in or out
Description: The user uses two fingers to pull together / apart to zoom in / zoom out
Dependencies: None
Rationale: To get a closer look on the map or location

2.3.1.13 - Title: Direct map
Precondition: The starting intent contains a valid location
Post condition: starts the map view
Description:Will go directly to map showing  that rooms/buildings location
Dependencies: Clipboard contains either a room or a building that is listed in Frapp 
Rationale: Helps the user fast get to a room/building

2.3.1.14 - Title: No search
Precondition: The starting intent contains an invalid location
Post condition: Starts the search view
Description: The user is shown the search fields
Dependencies: None
Rationale: If you have something in your clipboard that isn’t part of the listed rooms/buildings, you start from the beginning

2.4 Non-functional requirements
2.4.1 FRAPP shall be selectable as a location finder on Android.
2.4.2 The database shall be XML-based.

3 Test cases

3.1 Find location
Test case description: Test that Android lists FRAPP as a location finder.
Precondtion: Application not started.
Test steps:
 - Start an application which utilizes intents for finding a location.
 - Select a location.
 - Select FRAPP.
 - Observe FRAPP start and attemp to find the choosen location.
Related requirement: 2.3.1.2, 2.3.1.3, 2.4.1

3.2 Find location
Test case description: Test that choosing a valid location results in the map view getting displayed.
Precondtion: Application started.
Test steps:
 - Enter or choose a valid location.
 - Proceed to the map view.
 - Observe that the correct location is displayed.
